package fr.esgi.color_run.service.impl;

import fr.esgi.color_run.business.Discussion;
import fr.esgi.color_run.business.Message;
import fr.esgi.color_run.business.Member;
import fr.esgi.color_run.business.Role;
import fr.esgi.color_run.repository.MessageRepository;
import fr.esgi.color_run.repository.impl.MessageRepositoryImpl;
import fr.esgi.color_run.service.DiscussionService;
import fr.esgi.color_run.service.MessageService;
import fr.esgi.color_run.service.Course_memberService;
import fr.esgi.color_run.service.MemberService;
import fr.esgi.color_run.service.impl.Course_memberServiceImpl;
import fr.esgi.color_run.service.impl.MemberServiceImpl;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

public class MessageServiceImpl implements MessageService {

    private final MessageRepository messageRepository;
    private final DiscussionService discussionService;
    private final Course_memberService courseMemberService;
    private final MemberService memberService;

    public MessageServiceImpl() {
        this.messageRepository = new MessageRepositoryImpl();
        this.discussionService = new DiscussionServiceImpl();
        this.courseMemberService = new Course_memberServiceImpl();
        this.memberService = new MemberServiceImpl();
    }

    @Override
    public Message sendMessage(Long courseId, Long memberId, String content) {
        System.out.println("üí¨ Tentative d'envoi de message - Course: " + courseId + ", Member: " + memberId);

        // V√©rifications de s√©curit√©
        if (!canAccessChat(courseId, memberId)) {
            System.err.println("‚ùå Membre " + memberId + " non autoris√© √† envoyer des messages dans la course " + courseId);
            return null;
        }

        // Validation du contenu
        if (content == null || content.trim().isEmpty()) {
            System.err.println("‚ùå Contenu du message vide");
            return null;
        }

        content = content.trim();
        if (content.length() > 1000) {
            System.err.println("‚ùå Message trop long: " + content.length() + " caract√®res");
            return null;
        }

        // 1. Trouver ou cr√©er la discussion pour cette course
        Discussion discussion = discussionService.getOrCreateForCourse(courseId);
        if (discussion == null) {
            System.err.println("‚ùå Impossible de cr√©er/r√©cup√©rer la discussion pour la course " + courseId);
            return null;
        }

        // 2. Cr√©er le message avec discussionId
        Message message = new Message(discussion.getId(), memberId, content);
        message.sanitizeContent();

        if (!message.isValid()) {
            System.err.println("‚ùå Message invalide apr√®s validation");
            return null;
        }

        // 3. Sauvegarder
        Message savedMessage = messageRepository.save(message);
        if (savedMessage != null) {
            System.out.println("‚úÖ Message envoy√© avec succ√®s - ID: " + savedMessage.getId());
        }

        return savedMessage;
    }

    @Override
    public List<Message> getCourseMessages(Long courseId, Long memberId) {
        System.out.println("üì• R√©cup√©ration des messages - Course: " + courseId + ", Member: " + memberId);

        // V√©rification des autorisations
        if (!canAccessChat(courseId, memberId)) {
            System.err.println("‚ùå Membre " + memberId + " non autoris√© √† lire les messages de la course " + courseId);
            return List.of();
        }

        // Trouver la discussion pour cette course
        Discussion discussion = discussionService.getOrCreateForCourse(courseId);
        if (discussion == null) {
            System.err.println("‚ùå Aucune discussion trouv√©e pour la course " + courseId);
            return List.of();
        }

        // Cr√©er un message de bienvenue si c'est la premi√®re fois
        createWelcomeMessageIfNeeded(courseId, memberId);

        // R√©cup√©ration des messages r√©cents (100 derniers)
        List<Message> messages = messageRepository.findRecentByDiscussionId(discussion.getId(), 100);

        System.out.println("üì® " + messages.size() + " messages r√©cup√©r√©s pour la course " + courseId);
        return messages;
    }

    @Override
    public List<Message> getNewMessages(Long courseId, Long memberId, Long sinceMessageId) {
        System.out.println("üÜï R√©cup√©ration des nouveaux messages - Course: " + courseId +
                ", Member: " + memberId + ", Since: " + sinceMessageId);

        // V√©rification des autorisations
        if (!canAccessChat(courseId, memberId)) {
            System.err.println("‚ùå Membre " + memberId + " non autoris√© √† lire les nouveaux messages de la course " + courseId);
            return List.of();
        }

        // Trouver la discussion pour cette course
        Discussion discussion = discussionService.getOrCreateForCourse(courseId);
        if (discussion == null) {
            System.err.println("‚ùå Aucune discussion trouv√©e pour la course " + courseId);
            return List.of();
        }

        // R√©cup√©ration des nouveaux messages
        List<Message> newMessages = messageRepository.findByDiscussionIdSinceId(discussion.getId(), sinceMessageId);

        System.out.println("üì® " + newMessages.size() + " nouveaux messages r√©cup√©r√©s");
        return newMessages;
    }

    @Override
    public boolean canAccessChat(Long courseId, Long memberId) {
        if (courseId == null || memberId == null) {
            return false;
        }

        try {
            Optional<Member> memberOpt = memberService.getMember(memberId);
            if (memberOpt.isPresent()) {
                Member member = memberOpt.get();
                Role memberRole = member.getRole();

                // ‚úÖ ADMIN et ORGANIZER peuvent acc√©der √† tous les chats sans inscription
                if (memberRole == Role.ADMIN || memberRole == Role.ORGANIZER) {
                    System.out.println("‚úÖ Acc√®s chat autoris√© pour mod√©rateur " + memberId + " (" + memberRole + ") sur course " + courseId);
                    return true;
                }
            }

            // V√©rifier que le membre est inscrit ET a pay√© sa course
            boolean isRegisteredAndPaid = courseMemberService.isMemberRegisteredAndPaid(courseId, memberId);

            System.out.println("üîê V√©rification acc√®s chat - Course: " + courseId +
                    ", Member: " + memberId + ", Autoris√©: " + isRegisteredAndPaid);

            return isRegisteredAndPaid;

        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la v√©rification d'acc√®s au chat:");
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public boolean togglePinMessage(Long messageId, Long moderatorId) {
        Optional<Message> messageOpt = messageRepository.findById(messageId);
        if (!messageOpt.isPresent()) {
            System.err.println("‚ùå Message non trouv√©: " + messageId);
            return false;
        }

        Message message = messageOpt.get();

        // R√©cup√©rer le courseId via la discussion
        Long courseId = getCourseIdFromMessage(message);
        if (courseId == null) {
            System.err.println("‚ùå Impossible de r√©cup√©rer le courseId pour le message: " + messageId);
            return false;
        }

        if (!isModerator(courseId, moderatorId)) {
            System.err.println("‚ùå Utilisateur " + moderatorId + " n'est pas mod√©rateur de la course " + courseId);
            return false;
        }

        try {
            messageRepository.togglePin(messageId);
            System.out.println("‚úÖ Pin bascul√© pour le message: " + messageId);
            return true;
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors du basculement du pin:");
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public boolean hideMessage(Long messageId, Long moderatorId) {
        Optional<Message> messageOpt = messageRepository.findById(messageId);
        if (!messageOpt.isPresent()) {
            System.err.println("‚ùå Message non trouv√©: " + messageId);
            return false;
        }

        Message message = messageOpt.get();

        // R√©cup√©rer le courseId via la discussion
        Long courseId = getCourseIdFromMessage(message);
        if (courseId == null) {
            System.err.println("‚ùå Impossible de r√©cup√©rer le courseId pour le message: " + messageId);
            return false;
        }

        if (!isModerator(courseId, moderatorId)) {
            System.err.println("‚ùå Utilisateur " + moderatorId + " n'est pas mod√©rateur de la course " + courseId);
            return false;
        }

        try {
            // Sauvegarder le contenu original si ce n'est pas d√©j√† fait
            message.preserveOriginalContent();

            // Marquer comme masqu√©
            message.markAsHiddenByModerator(moderatorId);

            Message updatedMessage = messageRepository.update(message);

            if (updatedMessage != null) {
                System.out.println("‚úÖ Message masqu√© par mod√©rateur " + moderatorId + " - ID: " + messageId);
                return true;
            }

        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors du masquage du message " + messageId + ":");
            e.printStackTrace();
        }

        return false;
    }

    @Override
    public boolean deleteMessage(Long messageId, Long requesterId) {
        Optional<Message> messageOpt = messageRepository.findById(messageId);
        if (!messageOpt.isPresent()) {
            System.err.println("‚ùå Message non trouv√©: " + messageId);
            return false;
        }

        Message message = messageOpt.get();

        // R√©cup√©rer le courseId via la discussion
        Long courseId = getCourseIdFromMessage(message);
        if (courseId == null) {
            System.err.println("‚ùå Impossible de r√©cup√©rer le courseId pour le message: " + messageId);
            return false;
        }

        // ‚úÖ R√âCUP√âRER LE MEMBRE POUR V√âRIFIER SON R√îLE
        Optional<Member> memberOpt = memberService.getMember(requesterId);
        if (!memberOpt.isPresent()) {
            System.err.println("‚ùå Membre non trouv√© avec ID: " + requesterId);
            return false;
        }

        Member requester = memberOpt.get();
        boolean isAuthor = message.getMemberId().equals(requesterId);

        // ‚úÖ V√âRIFICATION SP√âCIFIQUE : Seuls les ADMIN peuvent supprimer d√©finitivement
        boolean isAdmin = (requester.getRole() == Role.ADMIN);
        boolean isMod = isModerator(courseId, requesterId);
        // V√©rifier que c'est l'auteur du message ou un mod√©rateur
//        boolean isAuthor = message.getMemberId().equals(requesterId);
//        boolean isMod = isModerator(courseId, requesterId);

        if (!isAuthor && !isMod) {
            System.err.println("‚ùå Utilisateur " + requesterId + " n'a pas le droit de supprimer le message " + messageId);
            return false;
        }

        try {
            if (isMod && !isAuthor) {
                if (!isAdmin) {
                    System.err.println("‚ùå Utilisateur " + requesterId + " (" + requester.getRole() + ") ne peut pas supprimer d√©finitivement. Seuls les ADMIN le peuvent.");
                    return false;
                }
                // Suppression d√©finitive par un mod√©rateur
                messageRepository.delete(messageId);
                System.out.println("‚úÖ Message supprim√© d√©finitivement par mod√©rateur " + requesterId + " - ID: " + messageId);
            } else {
                // Suppression par l'auteur : marquer comme supprim√©
                message.markAsDeletedByAuthor();
                Message updatedMessage = messageRepository.update(message);

                if (updatedMessage != null) {
                    System.out.println("‚úÖ Message supprim√© par l'auteur " + requesterId + " - ID: " + messageId);
                } else {
                    return false;
                }
            }
            return true;

        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la suppression du message " + messageId + ":");
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public boolean isModerator(Long courseId, Long memberId) {
        if (courseId == null || memberId == null) {
            System.err.println("‚ùå courseId ou memberId null dans isModerator");
            return false;
        }

        try {
            Optional<Member> memberOpt = memberService.getMember(memberId);
            if (!memberOpt.isPresent()) {
                System.err.println("‚ùå Membre non trouv√© avec ID: " + memberId);
                return false;
            }

            Member member = memberOpt.get();
            Role memberRole = member.getRole();

            System.out.println("üîç V√©rification mod√©rateur:");
            System.out.println("  - Member ID: " + memberId);
            System.out.println("  - Member Role: " + memberRole);
            System.out.println("  - Course ID: " + courseId);

            // Les admins et organisateurs sont mod√©rateurs de toutes les courses
            boolean isMod = (memberRole == Role.ADMIN || memberRole == Role.ORGANIZER);

            System.out.println("  - Est mod√©rateur: " + isMod);
            return isMod;

        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la v√©rification du statut mod√©rateur:");
            e.printStackTrace();
            return false;
        }
    }

    /**
     * M√©thode utilitaire pour r√©cup√©rer le courseId depuis un message
     * via sa discussion
     */
    private Long getCourseIdFromMessage(Message message) {
        try {
            Optional<Discussion> discussionOpt = discussionService.getDiscussionById(message.getDiscussionId());
            if (discussionOpt.isPresent()) {
                return discussionOpt.get().getCourseId();
            }
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la r√©cup√©ration du courseId:");
            e.printStackTrace();
        }
        return null;
    }

    /**
     * Cr√©e un message de bienvenue automatique quand un membre acc√®de au chat pour la premi√®re fois
     */
    public void createWelcomeMessageIfNeeded(Long courseId, Long memberId) {
        System.out.println("üéâ V√©rification message de bienvenue - Course: " + courseId + ", Member: " + memberId);

        try {
            // V√©rifier s'il y a d√©j√† des messages dans cette discussion
            Discussion discussion = discussionService.getOrCreateForCourse(courseId);
            if (discussion == null) {
                return;
            }

            int messageCount = messageRepository.countByDiscussionId(discussion.getId());

            // Si c'est le premier message de la discussion, cr√©er un message de bienvenue
            if (messageCount == 0) {
                String welcomeContent = "üèÉ‚Äç‚ôÇÔ∏è Bienvenue dans le chat de la course ! " +
                        "Merci pour votre inscription. Vous pouvez d√©sormais √©changer avec les autres participants. " +
                        "N'h√©sitez pas √† poser vos questions ou √† partager votre enthousiasme !";

                Message welcomeMessage = new Message(discussion.getId(), 1L, welcomeContent); // ID 1 = organisateur
                welcomeMessage.sanitizeContent();

                Message savedMessage = messageRepository.save(welcomeMessage);
                if (savedMessage != null) {
                    System.out.println("‚úÖ Message de bienvenue cr√©√© pour la course " + courseId);
                }
            }

        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la cr√©ation du message de bienvenue:");
            e.printStackTrace();
        }
    }

    /**
     * Met √† jour un message existant
     */
    public Message updateMessage(Long messageId, Long memberId, String newContent) {
        System.out.println("‚úèÔ∏è Tentative de modification - Message: " + messageId + ", Member: " + memberId);

        // Validation du contenu
        if (newContent == null || newContent.trim().isEmpty()) {
            System.err.println("‚ùå Nouveau contenu vide");
            return null;
        }

        newContent = newContent.trim();
        if (newContent.length() > 1000) {
            System.err.println("‚ùå Nouveau contenu trop long: " + newContent.length() + " caract√®res");
            return null;
        }

        // R√©cup√©rer le message
        Optional<Message> messageOpt = messageRepository.findById(messageId);
        if (!messageOpt.isPresent()) {
            System.err.println("‚ùå Message non trouv√©: " + messageId);
            return null;
        }

        Message message = messageOpt.get();

        // V√©rifier que c'est bien le message de l'utilisateur
        if (!message.getMemberId().equals(memberId)) {
            System.err.println("‚ùå Utilisateur " + memberId + " ne peut pas modifier le message " + messageId + " (appartient √† " + message.getMemberId() + ")");
            return null;
        }

        // V√©rifier que le message peut √™tre modifi√©
        if (!message.canBeEdited()) {
            System.err.println("‚ùå Message " + messageId + " ne peut pas √™tre modifi√© (supprim√© ou masqu√©)");
            return null;
        }

        try {
            // Sauvegarder le contenu original si ce n'est pas d√©j√† fait
            message.preserveOriginalContent();

            // Mettre √† jour le contenu
            message.setContent(newContent);
            message.markAsModified();
            message.sanitizeContent();

            Message updatedMessage = messageRepository.update(message);

            if (updatedMessage != null) {
                System.out.println("‚úÖ Message modifi√© avec succ√®s - ID: " + messageId);
                return updatedMessage;
            }

        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la modification du message " + messageId + ":");
            e.printStackTrace();
        }

        return null;
    }

    /**
     * Supprime un message par son auteur
     */
    public boolean deleteOwnMessage(Long messageId, Long memberId) {
        System.out.println("üóëÔ∏è Tentative de suppression par l'auteur - Message: " + messageId + ", Member: " + memberId);

        // R√©cup√©rer le message
        Optional<Message> messageOpt = messageRepository.findById(messageId);
        if (!messageOpt.isPresent()) {
            System.err.println("‚ùå Message non trouv√©: " + messageId);
            return false;
        }

        Message message = messageOpt.get();

        // V√©rifier que c'est bien le message de l'utilisateur
        if (!message.getMemberId().equals(memberId)) {
            System.err.println("‚ùå Utilisateur " + memberId + " ne peut pas supprimer le message " + messageId + " (appartient √† " + message.getMemberId() + ")");
            return false;
        }

        // V√©rifier que le message peut √™tre supprim√©
        if (!message.canBeDeleted()) {
            System.err.println("‚ùå Message " + messageId + " ne peut pas √™tre supprim√© (d√©j√† supprim√©)");
            return false;
        }

        try {
            // Marquer comme supprim√© par l'auteur
            message.markAsDeletedByAuthor();

            Message updatedMessage = messageRepository.update(message);

            if (updatedMessage != null) {
                System.out.println("‚úÖ Message supprim√© par l'auteur - ID: " + messageId);
                return true;
            }

        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la suppression du message " + messageId + ":");
            e.printStackTrace();
        }

        return false;
    }
}